{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"collapsed_sections":["IJw23BSuYadt","Y7O7xFOrlMO8"],"authorship_tag":"ABX9TyOWL5bsR8ypUyXcAVFEsXPV"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# Exercício 8_9: Retrieval-Augmented Generation"],"metadata":{"id":"IJw23BSuYadt"}},{"cell_type":"markdown","source":["**Nome:** Caio Petrucci dos Santos Rosa\n","\n","**RA:** 248245"],"metadata":{"id":"Jrlll2F7Yiwg"}},{"cell_type":"markdown","source":["## Enunciado"],"metadata":{"id":"Y7O7xFOrlMO8"}},{"cell_type":"markdown","source":["- Reproduzir o Visconde\n","\n","- Buscador: BM25 (pyserini) ou um sentence-transformer\n","\n","- Geração: LLaMa 3 70B (groq)\n","\n","- Avaliação no IIRC (F1, exact_match) usar 10% (150 primeiras perguntas.)\n","\n","- Pedir resultado do LLM em JSON para facilitar a avaliação automática\n","\n","- Usar exact match e F1-bow como métricas de avaliação\n","\n","- Usem o código do Visconde como referência: https://github.com/neuralmind-ai/visconde/\n","\n","- Ao indexar a base de busca, indexem apenas os documentos que são utilizados pelas 150 primeiras perguntas. Procurem pela key \"links\". Observem que o uso de segmentação é necessário. Tentei usar slding window baseado nas sentenças. Uma janela com 5 sentenças e 1 ou 2 de overlap é interessante. Podem experimentar outros valores, se houver tempo. Procurem no código do visconde o trecho onde o janelamento é feito e usem como base.\n","\n","- Para fazer os exemplos few-shot usem o autocot (ver slides)"],"metadata":{"id":"4YIohmLplOlo"}},{"cell_type":"markdown","source":["# Bibliotecas e pacotes"],"metadata":{"id":"9mZGoPbxRbDC"}},{"cell_type":"code","source":["!apt install openjdk-21-jdk-headless"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"xw5LYxRY3_ch","executionInfo":{"status":"ok","timestamp":1715220011377,"user_tz":180,"elapsed":4705,"user":{"displayName":"Caio Petrucci Rosa","userId":"08188944895391760158"}},"outputId":"3f00e0b9-5c91-473d-dc39-bb42929d8c71"},"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["Reading package lists... Done\n","Building dependency tree... Done\n","Reading state information... Done\n","openjdk-21-jdk-headless is already the newest version (21.0.2+13-1~22.04.1).\n","0 upgraded, 0 newly installed, 0 to remove and 45 not upgraded.\n"]}]},{"cell_type":"code","source":["import os\n","\n","os.environ['JAVA_HOME'] = '/usr/lib/jvm/java-21-openjdk-amd64'"],"metadata":{"id":"v7ak2eu54Luh","executionInfo":{"status":"ok","timestamp":1715220011377,"user_tz":180,"elapsed":3,"user":{"displayName":"Caio Petrucci Rosa","userId":"08188944895391760158"}}},"execution_count":2,"outputs":[]},{"cell_type":"code","source":["!pip install pyserini faiss-cpu\n","!pip install -q groq\n","!pip install -q beautifulsoup4"],"metadata":{"id":"ZrhLbP9qe1v-","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1715220042620,"user_tz":180,"elapsed":31246,"user":{"displayName":"Caio Petrucci Rosa","userId":"08188944895391760158"}},"outputId":"c345b586-d539-422e-f5dd-fce820e9f1d0"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: pyserini in /usr/local/lib/python3.10/dist-packages (0.35.0)\n","Requirement already satisfied: faiss-cpu in /usr/local/lib/python3.10/dist-packages (1.8.0)\n","Requirement already satisfied: Cython>=0.29.21 in /usr/local/lib/python3.10/dist-packages (from pyserini) (3.0.10)\n","Requirement already satisfied: numpy>=1.18.1 in /usr/local/lib/python3.10/dist-packages (from pyserini) (1.25.2)\n","Requirement already satisfied: pandas>=1.4.0 in /usr/local/lib/python3.10/dist-packages (from pyserini) (2.0.3)\n","Requirement already satisfied: pyjnius>=1.4.0 in /usr/local/lib/python3.10/dist-packages (from pyserini) (1.6.1)\n","Requirement already satisfied: scikit-learn>=0.22.1 in /usr/local/lib/python3.10/dist-packages (from pyserini) (1.2.2)\n","Requirement already satisfied: scipy>=1.4.1 in /usr/local/lib/python3.10/dist-packages (from pyserini) (1.11.4)\n","Requirement already satisfied: tqdm in /usr/local/lib/python3.10/dist-packages (from pyserini) (4.66.4)\n","Requirement already satisfied: transformers>=4.6.0 in /usr/local/lib/python3.10/dist-packages (from pyserini) (4.40.1)\n","Requirement already satisfied: sentencepiece>=0.1.95 in /usr/local/lib/python3.10/dist-packages (from pyserini) (0.1.99)\n","Requirement already satisfied: nmslib>=2.1.1 in /usr/local/lib/python3.10/dist-packages (from pyserini) (2.1.1)\n","Requirement already satisfied: onnxruntime>=1.8.1 in /usr/local/lib/python3.10/dist-packages (from pyserini) (1.17.3)\n","Requirement already satisfied: lightgbm>=3.3.2 in /usr/local/lib/python3.10/dist-packages (from pyserini) (4.1.0)\n","Requirement already satisfied: spacy>=3.2.1 in /usr/local/lib/python3.10/dist-packages (from pyserini) (3.7.4)\n","Requirement already satisfied: pyyaml in /usr/local/lib/python3.10/dist-packages (from pyserini) (6.0.1)\n","Requirement already satisfied: openai>=1.0.0 in /usr/local/lib/python3.10/dist-packages (from pyserini) (1.27.0)\n","Requirement already satisfied: tiktoken>=0.4.0 in /usr/local/lib/python3.10/dist-packages (from pyserini) (0.6.0)\n","Requirement already satisfied: pyarrow>=15.0.0 in /usr/local/lib/python3.10/dist-packages (from pyserini) (16.0.0)\n","Requirement already satisfied: pillow>=10.2.0 in /usr/local/lib/python3.10/dist-packages (from pyserini) (10.3.0)\n","Requirement already satisfied: pybind11<2.6.2 in /usr/local/lib/python3.10/dist-packages (from nmslib>=2.1.1->pyserini) (2.6.1)\n","Requirement already satisfied: psutil in /usr/local/lib/python3.10/dist-packages (from nmslib>=2.1.1->pyserini) (5.9.5)\n","Requirement already satisfied: coloredlogs in /usr/local/lib/python3.10/dist-packages (from onnxruntime>=1.8.1->pyserini) (15.0.1)\n","Requirement already satisfied: flatbuffers in /usr/local/lib/python3.10/dist-packages (from onnxruntime>=1.8.1->pyserini) (24.3.25)\n","Requirement already satisfied: packaging in /usr/local/lib/python3.10/dist-packages (from onnxruntime>=1.8.1->pyserini) (24.0)\n","Requirement already satisfied: protobuf in /usr/local/lib/python3.10/dist-packages (from onnxruntime>=1.8.1->pyserini) (3.20.3)\n","Requirement already satisfied: sympy in /usr/local/lib/python3.10/dist-packages (from onnxruntime>=1.8.1->pyserini) (1.12)\n","Requirement already satisfied: anyio<5,>=3.5.0 in /usr/local/lib/python3.10/dist-packages (from openai>=1.0.0->pyserini) (3.7.1)\n","Requirement already satisfied: distro<2,>=1.7.0 in /usr/lib/python3/dist-packages (from openai>=1.0.0->pyserini) (1.7.0)\n","Requirement already satisfied: httpx<1,>=0.23.0 in /usr/local/lib/python3.10/dist-packages (from openai>=1.0.0->pyserini) (0.27.0)\n","Requirement already satisfied: pydantic<3,>=1.9.0 in /usr/local/lib/python3.10/dist-packages (from openai>=1.0.0->pyserini) (2.7.1)\n","Requirement already satisfied: sniffio in /usr/local/lib/python3.10/dist-packages (from openai>=1.0.0->pyserini) (1.3.1)\n","Requirement already satisfied: typing-extensions<5,>=4.7 in /usr/local/lib/python3.10/dist-packages (from openai>=1.0.0->pyserini) (4.11.0)\n","Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.10/dist-packages (from pandas>=1.4.0->pyserini) (2.8.2)\n","Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas>=1.4.0->pyserini) (2023.4)\n","Requirement already satisfied: tzdata>=2022.1 in /usr/local/lib/python3.10/dist-packages (from pandas>=1.4.0->pyserini) (2024.1)\n","Requirement already satisfied: joblib>=1.1.1 in /usr/local/lib/python3.10/dist-packages (from scikit-learn>=0.22.1->pyserini) (1.4.2)\n","Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn>=0.22.1->pyserini) (3.5.0)\n","Requirement already satisfied: spacy-legacy<3.1.0,>=3.0.11 in /usr/local/lib/python3.10/dist-packages (from spacy>=3.2.1->pyserini) (3.0.12)\n","Requirement already satisfied: spacy-loggers<2.0.0,>=1.0.0 in /usr/local/lib/python3.10/dist-packages (from spacy>=3.2.1->pyserini) (1.0.5)\n","Requirement already satisfied: murmurhash<1.1.0,>=0.28.0 in /usr/local/lib/python3.10/dist-packages (from spacy>=3.2.1->pyserini) (1.0.10)\n","Requirement already satisfied: cymem<2.1.0,>=2.0.2 in /usr/local/lib/python3.10/dist-packages (from spacy>=3.2.1->pyserini) (2.0.8)\n","Requirement already satisfied: preshed<3.1.0,>=3.0.2 in /usr/local/lib/python3.10/dist-packages (from spacy>=3.2.1->pyserini) (3.0.9)\n","Requirement already satisfied: thinc<8.3.0,>=8.2.2 in /usr/local/lib/python3.10/dist-packages (from spacy>=3.2.1->pyserini) (8.2.3)\n","Requirement already satisfied: wasabi<1.2.0,>=0.9.1 in /usr/local/lib/python3.10/dist-packages (from spacy>=3.2.1->pyserini) (1.1.2)\n","Requirement already satisfied: srsly<3.0.0,>=2.4.3 in /usr/local/lib/python3.10/dist-packages (from spacy>=3.2.1->pyserini) (2.4.8)\n","Requirement already satisfied: catalogue<2.1.0,>=2.0.6 in /usr/local/lib/python3.10/dist-packages (from spacy>=3.2.1->pyserini) (2.0.10)\n","Requirement already satisfied: weasel<0.4.0,>=0.1.0 in /usr/local/lib/python3.10/dist-packages (from spacy>=3.2.1->pyserini) (0.3.4)\n","Requirement already satisfied: typer<0.10.0,>=0.3.0 in /usr/local/lib/python3.10/dist-packages (from spacy>=3.2.1->pyserini) (0.9.4)\n","Requirement already satisfied: smart-open<7.0.0,>=5.2.1 in /usr/local/lib/python3.10/dist-packages (from spacy>=3.2.1->pyserini) (6.4.0)\n","Requirement already satisfied: requests<3.0.0,>=2.13.0 in /usr/local/lib/python3.10/dist-packages (from spacy>=3.2.1->pyserini) (2.31.0)\n","Requirement already satisfied: jinja2 in /usr/local/lib/python3.10/dist-packages (from spacy>=3.2.1->pyserini) (3.1.3)\n","Requirement already satisfied: setuptools in /usr/local/lib/python3.10/dist-packages (from spacy>=3.2.1->pyserini) (67.7.2)\n","Requirement already satisfied: langcodes<4.0.0,>=3.2.0 in /usr/local/lib/python3.10/dist-packages (from spacy>=3.2.1->pyserini) (3.4.0)\n","Requirement already satisfied: regex>=2022.1.18 in /usr/local/lib/python3.10/dist-packages (from tiktoken>=0.4.0->pyserini) (2023.12.25)\n","Requirement already satisfied: filelock in /usr/local/lib/python3.10/dist-packages (from transformers>=4.6.0->pyserini) (3.14.0)\n","Requirement already satisfied: huggingface-hub<1.0,>=0.19.3 in /usr/local/lib/python3.10/dist-packages (from transformers>=4.6.0->pyserini) (0.20.3)\n","Requirement already satisfied: tokenizers<0.20,>=0.19 in /usr/local/lib/python3.10/dist-packages (from transformers>=4.6.0->pyserini) (0.19.1)\n","Requirement already satisfied: safetensors>=0.4.1 in /usr/local/lib/python3.10/dist-packages (from transformers>=4.6.0->pyserini) (0.4.3)\n","Requirement already satisfied: idna>=2.8 in /usr/local/lib/python3.10/dist-packages (from anyio<5,>=3.5.0->openai>=1.0.0->pyserini) (3.7)\n","Requirement already satisfied: exceptiongroup in /usr/local/lib/python3.10/dist-packages (from anyio<5,>=3.5.0->openai>=1.0.0->pyserini) (1.2.1)\n","Requirement already satisfied: certifi in /usr/local/lib/python3.10/dist-packages (from httpx<1,>=0.23.0->openai>=1.0.0->pyserini) (2024.2.2)\n","Requirement already satisfied: httpcore==1.* in /usr/local/lib/python3.10/dist-packages (from httpx<1,>=0.23.0->openai>=1.0.0->pyserini) (1.0.5)\n","Requirement already satisfied: h11<0.15,>=0.13 in /usr/local/lib/python3.10/dist-packages (from httpcore==1.*->httpx<1,>=0.23.0->openai>=1.0.0->pyserini) (0.14.0)\n","Requirement already satisfied: fsspec>=2023.5.0 in /usr/local/lib/python3.10/dist-packages (from huggingface-hub<1.0,>=0.19.3->transformers>=4.6.0->pyserini) (2023.6.0)\n","Requirement already satisfied: language-data>=1.2 in /usr/local/lib/python3.10/dist-packages (from langcodes<4.0.0,>=3.2.0->spacy>=3.2.1->pyserini) (1.2.0)\n","Requirement already satisfied: annotated-types>=0.4.0 in /usr/local/lib/python3.10/dist-packages (from pydantic<3,>=1.9.0->openai>=1.0.0->pyserini) (0.6.0)\n","Requirement already satisfied: pydantic-core==2.18.2 in /usr/local/lib/python3.10/dist-packages (from pydantic<3,>=1.9.0->openai>=1.0.0->pyserini) (2.18.2)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil>=2.8.2->pandas>=1.4.0->pyserini) (1.16.0)\n","Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests<3.0.0,>=2.13.0->spacy>=3.2.1->pyserini) (3.3.2)\n","Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests<3.0.0,>=2.13.0->spacy>=3.2.1->pyserini) (2.0.7)\n","Requirement already satisfied: blis<0.8.0,>=0.7.8 in /usr/local/lib/python3.10/dist-packages (from thinc<8.3.0,>=8.2.2->spacy>=3.2.1->pyserini) (0.7.11)\n","Requirement already satisfied: confection<1.0.0,>=0.0.1 in /usr/local/lib/python3.10/dist-packages (from thinc<8.3.0,>=8.2.2->spacy>=3.2.1->pyserini) (0.1.4)\n","Requirement already satisfied: click<9.0.0,>=7.1.1 in /usr/local/lib/python3.10/dist-packages (from typer<0.10.0,>=0.3.0->spacy>=3.2.1->pyserini) (8.1.7)\n","Requirement already satisfied: cloudpathlib<0.17.0,>=0.7.0 in /usr/local/lib/python3.10/dist-packages (from weasel<0.4.0,>=0.1.0->spacy>=3.2.1->pyserini) (0.16.0)\n","Requirement already satisfied: humanfriendly>=9.1 in /usr/local/lib/python3.10/dist-packages (from coloredlogs->onnxruntime>=1.8.1->pyserini) (10.0)\n","Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.10/dist-packages (from jinja2->spacy>=3.2.1->pyserini) (2.1.5)\n","Requirement already satisfied: mpmath>=0.19 in /usr/local/lib/python3.10/dist-packages (from sympy->onnxruntime>=1.8.1->pyserini) (1.3.0)\n","Requirement already satisfied: marisa-trie>=0.7.7 in /usr/local/lib/python3.10/dist-packages (from language-data>=1.2->langcodes<4.0.0,>=3.2.0->spacy>=3.2.1->pyserini) (1.1.0)\n"]}]},{"cell_type":"code","source":["from google.colab import userdata\n","from groq import Groq, RateLimitError\n","from tqdm import tqdm\n","from bs4 import BeautifulSoup\n","from pyserini.search.lucene import LuceneSearcher\n","from collections import Counter\n","\n","import json\n","import threading\n","import time\n","import json\n","import spacy\n","import argparse\n","import collections\n","import numpy as np\n","import re\n","import string\n","import sys\n","import unicodedata"],"metadata":{"id":"DI73RXJHewZM","executionInfo":{"status":"ok","timestamp":1715220058677,"user_tz":180,"elapsed":16088,"user":{"displayName":"Caio Petrucci Rosa","userId":"08188944895391760158"}}},"execution_count":4,"outputs":[]},{"cell_type":"markdown","source":["# Atributos e parâmetros"],"metadata":{"id":"YeHiF2qqfZSp"}},{"cell_type":"code","source":["LLM_MODEL_NAME = \"llama3-70b-8192\"\n","LLM_CONTEXT_SIZE = 8192\n","LLM_TEMPERATURE = 0\n","LLM_TOP_P = 1\n","\n","DOCUMENT_WINDOW_SENTENCE_OVERLAP = 2\n","DOCUMENT_WINDOW_SENTENCES_NUM = 5\n","\n","RETRIEVER_TOP_K = 5\n","\n","N_SAMPLES = 150"],"metadata":{"id":"FKNiJRASfbhK","executionInfo":{"status":"ok","timestamp":1715220058677,"user_tz":180,"elapsed":41,"user":{"displayName":"Caio Petrucci Rosa","userId":"08188944895391760158"}}},"execution_count":5,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"0Giyi5Rv_NIm"},"source":["# Dataset IIRC"]},{"cell_type":"code","source":["!wget https://iirc-dataset.s3.us-west-2.amazonaws.com/iirc_test.json\n","\n","!wget https://iirc-dataset.s3.us-west-2.amazonaws.com/context_articles.tar.gz\n","!tar -xzf context_articles.tar.gz"],"metadata":{"id":"alujzPGr4q8O","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1715220083172,"user_tz":180,"elapsed":24533,"user":{"displayName":"Caio Petrucci Rosa","userId":"08188944895391760158"}},"outputId":"2909a203-aa11-4ddc-f5f6-8482af0a64c0"},"execution_count":6,"outputs":[{"output_type":"stream","name":"stdout","text":["--2024-05-09 02:00:58--  https://iirc-dataset.s3.us-west-2.amazonaws.com/iirc_test.json\n","Resolving iirc-dataset.s3.us-west-2.amazonaws.com (iirc-dataset.s3.us-west-2.amazonaws.com)... 3.5.86.39, 52.92.248.130, 52.92.195.170, ...\n","Connecting to iirc-dataset.s3.us-west-2.amazonaws.com (iirc-dataset.s3.us-west-2.amazonaws.com)|3.5.86.39|:443... connected.\n","HTTP request sent, awaiting response... 200 OK\n","Length: 2874825 (2.7M) [application/json]\n","Saving to: ‘iirc_test.json’\n","\n","iirc_test.json      100%[===================>]   2.74M  --.-KB/s    in 0.1s    \n","\n","2024-05-09 02:00:58 (25.3 MB/s) - ‘iirc_test.json’ saved [2874825/2874825]\n","\n","--2024-05-09 02:00:58--  https://iirc-dataset.s3.us-west-2.amazonaws.com/context_articles.tar.gz\n","Resolving iirc-dataset.s3.us-west-2.amazonaws.com (iirc-dataset.s3.us-west-2.amazonaws.com)... 3.5.86.39, 52.92.248.130, 52.92.195.170, ...\n","Connecting to iirc-dataset.s3.us-west-2.amazonaws.com (iirc-dataset.s3.us-west-2.amazonaws.com)|3.5.86.39|:443... connected.\n","HTTP request sent, awaiting response... 200 OK\n","Length: 385263479 (367M) [application/x-gzip]\n","Saving to: ‘context_articles.tar.gz’\n","\n","context_articles.ta 100%[===================>] 367.42M  72.9MB/s    in 5.2s    \n","\n","2024-05-09 02:01:03 (71.2 MB/s) - ‘context_articles.tar.gz’ saved [385263479/385263479]\n","\n"]}]},{"cell_type":"code","source":["test_set = json.load(open('iirc_test.json', 'r'))\n","context_articles = json.load(open('context_articles.json', 'r'))"],"metadata":{"id":"cYLi95LnZ7kg","executionInfo":{"status":"ok","timestamp":1715220094203,"user_tz":180,"elapsed":11035,"user":{"displayName":"Caio Petrucci Rosa","userId":"08188944895391760158"}}},"execution_count":7,"outputs":[]},{"cell_type":"markdown","source":["# Etapa de *Indexing* e pré-processamento"],"metadata":{"id":"iAYAeAUaCgmh"}},{"cell_type":"code","source":["# Código adaptado do código do Ramon Simões Abilio\n","# Também foi inspirado no código do Visconde (https://github.com/neuralmind-ai/visconde/blob/main/iirc_create_indices.ipynb)\n","\n","def remove_html_tags(text):\n","    soup = BeautifulSoup(text, \"html.parser\")\n","    return soup.get_text()\n","\n","def select_n_samples(dataset, max_samples):\n","    documents = []\n","    all_titles = []\n","    count_contexts = 0\n","\n","    for item in tqdm(dataset):\n","        title = item['title'].lower()\n","\n","        if title not in all_titles:\n","            documents.append(item)\n","            all_titles.append(title)\n","            count_contexts += 1\n","\n","        if count_contexts == max_samples:\n","            break\n","\n","    return documents\n","\n","def extract_documents(dataset, context_articles):\n","    documents = []\n","    all_titles = []\n","\n","    count_contexts = 0\n","    count_links = 0\n","\n","    for item in tqdm(dataset):\n","        title = item['title'].lower()\n","        if title not in all_titles:\n","            cleaned_text = remove_html_tags(item[\"text\"])\n","            documents.append({\n","                \"title\": item['title'],\n","                \"content\": cleaned_text\n","            })\n","            all_titles.append(title)\n","            count_contexts += 1\n","\n","        for link in item[\"links\"]:\n","            link_title = link['target'].lower()\n","            if link_title in context_articles and link_title not in all_titles:\n","                cleaned_text = remove_html_tags(context_articles[link_title])\n","                documents.append({\n","                    \"title\": link['target'],\n","                    \"content\": cleaned_text\n","                })\n","                all_titles.append(link_title)\n","                count_links += 1\n","\n","    print(f\"\\nQuantidade de contextos: \\t {count_contexts}\")\n","    print(f\"Quantidade de contextos relacionados: \\t {count_links}\")\n","    print(f\"Quantidade total de documentos: \\t {len(documents)}\")\n","\n","    return documents"],"metadata":{"id":"ma0HBKrx5Nis","executionInfo":{"status":"ok","timestamp":1715220094204,"user_tz":180,"elapsed":32,"user":{"displayName":"Caio Petrucci Rosa","userId":"08188944895391760158"}}},"execution_count":8,"outputs":[]},{"cell_type":"code","source":["selected_samples = select_n_samples(test_set, N_SAMPLES)\n","full_documents = extract_documents(selected_samples, context_articles)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ITmxX84xeFCF","executionInfo":{"status":"ok","timestamp":1715220128263,"user_tz":180,"elapsed":34090,"user":{"displayName":"Caio Petrucci Rosa","userId":"08188944895391760158"}},"outputId":"a17d5d7f-dafc-4ec1-9cb8-5aa27a512eb2"},"execution_count":9,"outputs":[{"output_type":"stream","name":"stderr","text":[" 29%|██▉       | 149/514 [00:00<00:00, 218133.09it/s]\n","100%|██████████| 150/150 [00:34<00:00,  4.38it/s]"]},{"output_type":"stream","name":"stdout","text":["\n","Quantidade de contextos: \t 148\n","Quantidade de contextos relacionados: \t 2016\n","Quantidade total de documentos: \t 2164\n"]},{"output_type":"stream","name":"stderr","text":["\n"]}]},{"cell_type":"code","source":["nlp = spacy.blank(\"en\")\n","nlp.add_pipe(\"sentencizer\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"8RokCO5djQvD","executionInfo":{"status":"ok","timestamp":1715220128669,"user_tz":180,"elapsed":421,"user":{"displayName":"Caio Petrucci Rosa","userId":"08188944895391760158"}},"outputId":"dbe0dd99-858f-405e-fd76-d9c452cc43cb"},"execution_count":10,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<spacy.pipeline.sentencizer.Sentencizer at 0x7fefb6a039c0>"]},"metadata":{},"execution_count":10}]},{"cell_type":"code","source":["# Código baseado no código do Visconde (https://github.com/neuralmind-ai/visconde/blob/main/iirc_create_indices.ipynb)\n","# Pequena adaptação para o spaCy v3\n","\n","def sliding_window_split(documents, stride, max_length):\n","    treated_documents = []\n","\n","    for j, document in enumerate(tqdm(documents)):\n","        doc_text = document['content']\n","        doc = nlp(doc_text[:10000])\n","        sentences = [sent.text.strip() for sent in doc.sents]\n","        for i in range(0, len(sentences), stride):\n","            segment = ' '.join(sentences[i:i+max_length]).strip()\n","            treated_documents.append({\n","                \"title\": document['title'],\n","                \"contents\": document['title']+\". \"+segment,\n","                \"segment\": segment\n","            })\n","            if i+max_length >= len(sentences):\n","                break\n","\n","    return treated_documents"],"metadata":{"id":"Lb4DpLU85PDH","executionInfo":{"status":"ok","timestamp":1715220128669,"user_tz":180,"elapsed":4,"user":{"displayName":"Caio Petrucci Rosa","userId":"08188944895391760158"}}},"execution_count":11,"outputs":[]},{"cell_type":"code","source":["def add_id_and_filter_empty(documents):\n","    filtered_documents = []\n","    for i, doc in enumerate(documents):\n","        if doc['segment'] != \"\":\n","            filtered_doc = { **doc }\n","            filtered_doc['id'] = i\n","            filtered_documents.append(filtered_doc)\n","    return filtered_documents"],"metadata":{"id":"CcQ2A4umkMuI","executionInfo":{"status":"ok","timestamp":1715220128669,"user_tz":180,"elapsed":3,"user":{"displayName":"Caio Petrucci Rosa","userId":"08188944895391760158"}}},"execution_count":12,"outputs":[]},{"cell_type":"code","source":["treated_documents = add_id_and_filter_empty(sliding_window_split(full_documents, stride=DOCUMENT_WINDOW_SENTENCE_OVERLAP, max_length=DOCUMENT_WINDOW_SENTENCES_NUM))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"MdkqENrskJy5","executionInfo":{"status":"ok","timestamp":1715220155539,"user_tz":180,"elapsed":26873,"user":{"displayName":"Caio Petrucci Rosa","userId":"08188944895391760158"}},"outputId":"a14512d8-20b9-40b2-d48e-1c585a427a9f"},"execution_count":13,"outputs":[{"output_type":"stream","name":"stderr","text":["100%|██████████| 2164/2164 [00:26<00:00, 81.01it/s] \n"]}]},{"cell_type":"code","source":["!mkdir iirc_index_content"],"metadata":{"id":"IVakqEb3nGFY","executionInfo":{"status":"ok","timestamp":1715220155539,"user_tz":180,"elapsed":28,"user":{"displayName":"Caio Petrucci Rosa","userId":"08188944895391760158"}}},"execution_count":14,"outputs":[]},{"cell_type":"code","source":["with open(\"iirc_index_content/contents.jsonl\",'w') as file:\n","    for doc in treated_documents:\n","        file.write(json.dumps(doc)+\"\\n\")"],"metadata":{"id":"wLYm-JUclZl_","executionInfo":{"status":"ok","timestamp":1715220156545,"user_tz":180,"elapsed":1031,"user":{"displayName":"Caio Petrucci Rosa","userId":"08188944895391760158"}}},"execution_count":15,"outputs":[]},{"cell_type":"code","source":["!python3 -m pyserini.index -collection JsonCollection -generator DefaultLuceneDocumentGenerator -threads 1 -input iirc_index_content -index iirc_index -storeRaw"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-YkqviJjaYSp","executionInfo":{"status":"ok","timestamp":1715220179608,"user_tz":180,"elapsed":23071,"user":{"displayName":"Caio Petrucci Rosa","userId":"08188944895391760158"}},"outputId":"de139506-b147-47b3-9560-42e2df8e948b"},"execution_count":16,"outputs":[{"output_type":"stream","name":"stdout","text":["pyserini.index is deprecated, please use pyserini.index.lucene.\n","2024-05-09 02:02:39,605 INFO  [main] index.AbstractIndexer (AbstractIndexer.java:204) - Setting log level to INFO\n","2024-05-09 02:02:39,608 INFO  [main] index.AbstractIndexer (AbstractIndexer.java:207) - ============ Loading Index Configuration ============\n","2024-05-09 02:02:39,608 INFO  [main] index.AbstractIndexer (AbstractIndexer.java:208) - AbstractIndexer settings:\n","2024-05-09 02:02:39,609 INFO  [main] index.AbstractIndexer (AbstractIndexer.java:209) -  + DocumentCollection path: iirc_index_content\n","2024-05-09 02:02:39,617 INFO  [main] index.AbstractIndexer (AbstractIndexer.java:210) -  + CollectionClass: JsonCollection\n","2024-05-09 02:02:39,619 INFO  [main] index.AbstractIndexer (AbstractIndexer.java:211) -  + Index path: iirc_index\n","2024-05-09 02:02:39,619 INFO  [main] index.AbstractIndexer (AbstractIndexer.java:212) -  + Threads: 1\n","2024-05-09 02:02:39,620 INFO  [main] index.AbstractIndexer (AbstractIndexer.java:213) -  + Optimize (merge segments)? false\n","May 09, 2024 2:02:39 AM org.apache.lucene.store.MemorySegmentIndexInputProvider <init>\n","INFO: Using MemorySegmentIndexInput with Java 21; to disable start with -Dorg.apache.lucene.store.MMapDirectory.enableMemorySegments=false\n","2024-05-09 02:02:39,730 INFO  [main] index.IndexCollection (IndexCollection.java:246) - Using DefaultEnglishAnalyzer\n","2024-05-09 02:02:39,737 INFO  [main] index.IndexCollection (IndexCollection.java:247) - Stemmer: porter\n","2024-05-09 02:02:39,739 INFO  [main] index.IndexCollection (IndexCollection.java:248) - Keep stopwords? false\n","2024-05-09 02:02:39,742 INFO  [main] index.IndexCollection (IndexCollection.java:249) - Stopwords file: null\n","2024-05-09 02:02:40,037 INFO  [main] index.IndexCollection (IndexCollection.java:197) - IndexCollection settings:\n","2024-05-09 02:02:40,037 INFO  [main] index.IndexCollection (IndexCollection.java:198) -  + Generator: DefaultLuceneDocumentGenerator\n","2024-05-09 02:02:40,038 INFO  [main] index.IndexCollection (IndexCollection.java:199) -  + Language: en\n","2024-05-09 02:02:40,038 INFO  [main] index.IndexCollection (IndexCollection.java:200) -  + Stemmer: porter\n","2024-05-09 02:02:40,038 INFO  [main] index.IndexCollection (IndexCollection.java:201) -  + Keep stopwords? false\n","2024-05-09 02:02:40,039 INFO  [main] index.IndexCollection (IndexCollection.java:202) -  + Stopwords: null\n","2024-05-09 02:02:40,041 INFO  [main] index.IndexCollection (IndexCollection.java:203) -  + Store positions? false\n","2024-05-09 02:02:40,042 INFO  [main] index.IndexCollection (IndexCollection.java:204) -  + Store docvectors? false\n","2024-05-09 02:02:40,043 INFO  [main] index.IndexCollection (IndexCollection.java:205) -  + Store document \"contents\" field? false\n","2024-05-09 02:02:40,043 INFO  [main] index.IndexCollection (IndexCollection.java:206) -  + Store document \"raw\" field? true\n","2024-05-09 02:02:40,044 INFO  [main] index.IndexCollection (IndexCollection.java:207) -  + Additional fields to index: []\n","2024-05-09 02:02:40,054 INFO  [main] index.IndexCollection (IndexCollection.java:208) -  + Whitelist: null\n","2024-05-09 02:02:40,055 INFO  [main] index.IndexCollection (IndexCollection.java:209) -  + Pretokenized?: false\n","2024-05-09 02:02:40,057 INFO  [main] index.IndexCollection (IndexCollection.java:210) -  + Codec: Lucene99\n","2024-05-09 02:02:40,058 INFO  [main] index.AbstractIndexer (AbstractIndexer.java:237) - ============ Indexing Collection ============\n","2024-05-09 02:02:40,069 INFO  [main] index.AbstractIndexer (AbstractIndexer.java:246) - Thread pool with 1 threads initialized.\n","2024-05-09 02:02:40,069 INFO  [main] index.AbstractIndexer (AbstractIndexer.java:247) - 1 file found in iirc_index_content\n","2024-05-09 02:02:40,069 INFO  [main] index.AbstractIndexer (AbstractIndexer.java:248) - Starting to index...\n","2024-05-09 02:02:58,826 INFO  [main] index.AbstractIndexer (AbstractIndexer.java:306) - Indexing Complete! 55,006 documents indexed\n","2024-05-09 02:02:58,827 INFO  [main] index.AbstractIndexer (AbstractIndexer.java:307) - ============ Final Counter Values ============\n","2024-05-09 02:02:58,827 INFO  [main] index.AbstractIndexer (AbstractIndexer.java:308) - indexed:           55,006\n","2024-05-09 02:02:58,828 INFO  [main] index.AbstractIndexer (AbstractIndexer.java:309) - unindexable:            0\n","2024-05-09 02:02:58,828 INFO  [main] index.AbstractIndexer (AbstractIndexer.java:310) - empty:                  0\n","2024-05-09 02:02:58,828 INFO  [main] index.AbstractIndexer (AbstractIndexer.java:311) - skipped:                0\n","2024-05-09 02:02:58,829 INFO  [main] index.AbstractIndexer (AbstractIndexer.java:312) - errors:                 0\n","2024-05-09 02:02:58,834 INFO  [main] index.AbstractIndexer (AbstractIndexer.java:315) - Total 55,006 documents indexed in 00:00:18\n"]}]},{"cell_type":"markdown","source":["# Etapa de *Retrieval*"],"metadata":{"id":"XYBi_rK_dfES"}},{"cell_type":"code","source":["class PyseriniRetriever:\n","    def __init__(self):\n","        self.searcher = LuceneSearcher('./iirc_index')\n","\n","    def __call__(self, query, top_k):\n","        hits = self.searcher.search(query, k=top_k)\n","        return [ json.loads(hit.lucene_document.get('raw')) for hit in hits ]"],"metadata":{"id":"UtwcyWKoih1d","executionInfo":{"status":"ok","timestamp":1715220179609,"user_tz":180,"elapsed":32,"user":{"displayName":"Caio Petrucci Rosa","userId":"08188944895391760158"}}},"execution_count":17,"outputs":[]},{"cell_type":"code","source":["retriever = PyseriniRetriever()"],"metadata":{"id":"puDHmhIgixX9","executionInfo":{"status":"ok","timestamp":1715220179997,"user_tz":180,"elapsed":8,"user":{"displayName":"Caio Petrucci Rosa","userId":"08188944895391760158"}}},"execution_count":18,"outputs":[]},{"cell_type":"markdown","source":["# Etapa de *Generation*"],"metadata":{"id":"7KYHT4PBk9Aj"}},{"cell_type":"code","source":["class GroqCompletionInterface:\n","    '''\n","    Interface for using the Groq API\n","\n","    Implements a rate limit control for multi-threading use.\n","    '''\n","\n","    # Groq client\n","    _client = None\n","\n","    # documentacao dos parametros em: https://console.groq.com/docs/text-chat\n","    _model_name = LLM_MODEL_NAME\n","    _context_size = LLM_CONTEXT_SIZE\n","    _temperature = LLM_TEMPERATURE\n","    _top_p = LLM_TOP_P\n","    _stop = None\n","    _stream = False\n","\n","    # Mutex lock\n","    _rate_lock = threading.Lock()\n","\n","    def __init__(self):\n","        '''\n","        GroqCompletionInterface constructor.\n","        '''\n","        if GroqCompletionInterface._client is None:\n","            api_key = userdata.get('GROQ_API_KEY')\n","            if api_key is None:\n","                raise RuntimeError(\"'GROQ_API_KEY' variable is not set in environment.\")\n","            GroqCompletionInterface._client = Groq(api_key=api_key)\n","\n","    def __call__(self, prompt: str) -> str:\n","        '''\n","        Generates the model response\n","\n","        Args:\n","            prompt (str): prompt to send to the model.\n","\n","        Returns:\n","            str: model response.\n","        '''\n","\n","        done = False\n","        while not done:\n","            try:\n","                GroqCompletionInterface._rate_lock.acquire()\n","                GroqCompletionInterface._rate_lock.release()\n","                chat_completion = GroqCompletionInterface._client.chat.completions.create(\n","                    messages=[\n","                        {\n","                            \"role\": \"system\",\n","                            \"content\": prompt,\n","                        }\n","                    ],\n","                    model=self._model_name,\n","                    temperature=self._temperature,\n","                    max_tokens=self._context_size,\n","                    top_p=self._top_p,\n","                    stop=self._stop,\n","                    stream=self._stream,\n","                )\n","                done = True\n","            except RateLimitError as exception:\n","                GroqCompletionInterface.error = exception\n","                if not GroqCompletionInterface._rate_lock.locked():\n","                    GroqCompletionInterface._rate_lock.acquire()\n","                    time.sleep(1.75)\n","                    GroqCompletionInterface._rate_lock.release()\n","\n","        return chat_completion.choices[0].message.content\n"],"metadata":{"id":"flmyHK0ddvfU","executionInfo":{"status":"ok","timestamp":1715220179998,"user_tz":180,"elapsed":8,"user":{"displayName":"Caio Petrucci Rosa","userId":"08188944895391760158"}}},"execution_count":19,"outputs":[]},{"cell_type":"code","source":["groq_completion = GroqCompletionInterface()"],"metadata":{"id":"KtrStIW2e43q","executionInfo":{"status":"ok","timestamp":1715220181417,"user_tz":180,"elapsed":1426,"user":{"displayName":"Caio Petrucci Rosa","userId":"08188944895391760158"}}},"execution_count":20,"outputs":[]},{"cell_type":"markdown","source":["# Pipeline RAG"],"metadata":{"id":"E2u93VDQl1S2"}},{"cell_type":"code","source":["base_prompt = \"\"\"Consider the following context passages and answer the given question. Let's think step by step.\n","If you don't know any plausible answer, answer \"Not enough information provided in the documents.\".\n","\n","{related_documents}\n","\n","Question: {query}\n","\"\"\""],"metadata":{"id":"A7OLwXxVnMUD","executionInfo":{"status":"ok","timestamp":1715220257168,"user_tz":180,"elapsed":274,"user":{"displayName":"Caio Petrucci Rosa","userId":"08188944895391760158"}}},"execution_count":32,"outputs":[]},{"cell_type":"code","source":["class RagPipeline:\n","    def __init__(self, llm_completion, retriever):\n","        self._llm_completion: GroqCompletionInterface = llm_completion\n","        self._retriever: PyseriniRetriever = retriever\n","        self._base_prompt: str = base_prompt\n","\n","    def _search_related_documents(self, query):\n","        return self._retriever(query, RETRIEVER_TOP_K)\n","\n","    def _augment_prompt(self, query, related_documents):\n","        formatted_related_documents = \"\"\n","        for i, doc in enumerate(related_documents, 1):\n","            formatted_related_documents += f\"Context passage {i}: {doc['segment']}\"\n","\n","        return self._base_prompt.format(\n","            query=query,\n","            related_documents=formatted_related_documents,\n","        )\n","\n","    def _generate_completion(self, augmented_prompt):\n","        return self._llm_completion(augmented_prompt)\n","\n","    def __call__(self, query, associated_contexts):\n","        documents = self._search_related_documents(query)\n","        prompt = self._augment_prompt(query, associated_contexts + list(reversed(documents)))\n","        return self._generate_completion(prompt)"],"metadata":{"id":"Rf25stPZfHi-","executionInfo":{"status":"ok","timestamp":1715220257556,"user_tz":180,"elapsed":6,"user":{"displayName":"Caio Petrucci Rosa","userId":"08188944895391760158"}}},"execution_count":33,"outputs":[]},{"cell_type":"code","source":["rag_pipeline = RagPipeline(groq_completion, retriever)"],"metadata":{"id":"UbFvoniWfO43","executionInfo":{"status":"ok","timestamp":1715220258797,"user_tz":180,"elapsed":5,"user":{"displayName":"Caio Petrucci Rosa","userId":"08188944895391760158"}}},"execution_count":34,"outputs":[]},{"cell_type":"code","source":["rag_pipeline(\"What was the 9/11 incident?\", associated_contexts=[])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":35},"id":"xDoVdjvbvH-h","executionInfo":{"status":"ok","timestamp":1715220259493,"user_tz":180,"elapsed":375,"user":{"displayName":"Caio Petrucci Rosa","userId":"08188944895391760158"}},"outputId":"eea12203-c6b1-432f-e66d-dc6754251ab4"},"execution_count":35,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'Not enough information provided in the documents.'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":35}]},{"cell_type":"markdown","source":["# Avaliação"],"metadata":{"id":"DTjGDtPtdhXN"}},{"cell_type":"code","source":["# Código adaptado do código do Visconde (https://github.com/neuralmind-ai/visconde/blob/main/iirc_generate_and_evaluate.ipynb)\n","\n","def normalize_answer(s):\n","    \"\"\"Lower text and remove punctuation, articles and extra whitespace.\"\"\"\n","\n","    def remove_articles(text):\n","        regex = re.compile(r'\\b(a|an|the)\\b', re.UNICODE)\n","        return re.sub(regex, ' ', text)\n","\n","    def white_space_fix(text):\n","        return ' '.join(text.split())\n","\n","    def remove_punc(text):\n","        exclude = set(string.punctuation)\n","        return ''.join(ch for ch in text if ch not in exclude)\n","\n","    def lower(text):\n","        return text.lower()\n","\n","    def remove_accents(input_str):\n","        nfkd_form = unicodedata.normalize('NFKD', input_str)\n","        only_ascii = nfkd_form.encode('ASCII', 'ignore')\n","        return only_ascii.decode(\"utf-8\")\n","\n","    return white_space_fix(remove_articles(remove_punc(lower(remove_accents(s)))))\n","\n","\n","def get_tokens(s):\n","    if not s: return []\n","    return normalize_answer(s).split()\n","\n","\n","def compute_exact(a_gold, a_pred):\n","    return int(normalize_answer(a_gold) == normalize_answer(a_pred))\n","\n","\n","def compute_f1(a_gold, a_pred):\n","    gold_toks = get_tokens(a_gold)\n","    pred_toks = get_tokens(a_pred)\n","    common = collections.Counter(gold_toks) & collections.Counter(pred_toks)\n","    num_same = sum(common.values())\n","\n","    if len(gold_toks) == 0 or len(pred_toks) == 0:\n","        # If either is no-answer, then F1 is 1 if they agree, 0 otherwise\n","        return int(gold_toks == pred_toks)\n","\n","    if num_same == 0:\n","        return 0\n","\n","    precision = 1.0 * num_same / len(pred_toks)\n","    recall = 1.0 * num_same / len(gold_toks)\n","    f1 = (2 * precision * recall) / (precision + recall)\n","    return f1"],"metadata":{"id":"ot2UXNhSsnxD","executionInfo":{"status":"ok","timestamp":1715220264137,"user_tz":180,"elapsed":4,"user":{"displayName":"Caio Petrucci Rosa","userId":"08188944895391760158"}}},"execution_count":36,"outputs":[]},{"cell_type":"code","source":["evaluation_results = []\n","\n","# use 10% of samples to evaluate\n","idx_p10 = int(0.1 * len(test_set))\n","\n","for sample in tqdm(test_set[:idx_p10]):\n","    for q in sample['questions']:\n","        associated_contexts = [ { 'segment': c['text'] } for c in q['context'] ]\n","        question = q['question']\n","        llm_answer = rag_pipeline(question, associated_contexts)\n","\n","        expected_answer = \"\"\n","        if q['answer']['type'] == \"span\":\n","            expected_answer = \", \".join([a['text'] for a in q['answer'][\"answer_spans\"]])\n","        elif q['answer']['type'] == \"value\":\n","            expected_answer = \"{0} {1}\".format(q['answer']['answer_value'], q['answer']['answer_unit'])\n","        elif q['answer']['type'] == \"binary\":\n","            expected_answer = q['answer']['answer_value']\n","        elif q['answer']['type'] == \"none\":\n","            expected_answer = \"Not enough information provided in the documents.\"\n","\n","        evaluation_results.append({\n","            'question': question,\n","            'expected_answer': expected_answer,\n","            'llm_answer': llm_answer,\n","        })"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"eR1HSqRh4bhx","executionInfo":{"status":"ok","timestamp":1715222350513,"user_tz":180,"elapsed":1204271,"user":{"displayName":"Caio Petrucci Rosa","userId":"08188944895391760158"}},"outputId":"8e840397-4d2e-46ee-8ac9-9cf3f63423f4"},"execution_count":74,"outputs":[{"output_type":"stream","name":"stderr","text":["100%|██████████| 51/51 [20:03<00:00, 23.60s/it]\n"]}]},{"cell_type":"code","source":["f1s = []\n","ems = []\n","\n","for eval_result in evaluation_results:\n","    f1s.append(compute_f1(eval_result['expected_answer'], eval_result['llm_answer']))\n","    ems.append(compute_exact(eval_result['expected_answer'], eval_result['llm_answer']))\n","\n","print(\"F1: \",np.mean(f1s))\n","print(\"EM: \",np.mean(ems))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"DxAiVS_otKQo","executionInfo":{"status":"ok","timestamp":1715222369624,"user_tz":180,"elapsed":389,"user":{"displayName":"Caio Petrucci Rosa","userId":"08188944895391760158"}},"outputId":"278a2374-dadb-47c9-920e-8fb0da0d0e12"},"execution_count":75,"outputs":[{"output_type":"stream","name":"stdout","text":["F1:  0.4021961630058525\n","EM:  0.2923076923076923\n"]}]}]}